// Code generated by go-swagger; DO NOT EDIT.

package rates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/ehabterra/flash_api/api/models"
)

// GetRatesHandlerFunc turns a function with the right signature into a get rates handler
type GetRatesHandlerFunc func(GetRatesParams, *models.Principle) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRatesHandlerFunc) Handle(params GetRatesParams, principal *models.Principle) middleware.Responder {
	return fn(params, principal)
}

// GetRatesHandler interface for that can handle valid get rates params
type GetRatesHandler interface {
	Handle(GetRatesParams, *models.Principle) middleware.Responder
}

// NewGetRates creates a new http.Handler for the get rates operation
func NewGetRates(ctx *middleware.Context, handler GetRatesHandler) *GetRates {
	return &GetRates{Context: ctx, Handler: handler}
}

/* GetRates swagger:route GET /api/v1/rates/{base}/{target} rates getRates

View exchange rates

*/
type GetRates struct {
	Context *middleware.Context
	Handler GetRatesHandler
}

func (o *GetRates) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetRatesParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principle
	if uprinc != nil {
		principal = uprinc.(*models.Principle) // this is really a models.Principle, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
