// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/ehabterra/flash_api/api/models"
)

// UploadHandlerFunc turns a function with the right signature into a upload handler
type UploadHandlerFunc func(UploadParams, *models.Principle) middleware.Responder

// Handle executing the request and returning a response
func (fn UploadHandlerFunc) Handle(params UploadParams, principal *models.Principle) middleware.Responder {
	return fn(params, principal)
}

// UploadHandler interface for that can handle valid upload params
type UploadHandler interface {
	Handle(UploadParams, *models.Principle) middleware.Responder
}

// NewUpload creates a new http.Handler for the upload operation
func NewUpload(ctx *middleware.Context, handler UploadHandler) *Upload {
	return &Upload{Context: ctx, Handler: handler}
}

/* Upload swagger:route POST /api/v1/users/me/uploads/{account_number} users upload

Upload money from a connected bank

*/
type Upload struct {
	Context *middleware.Context
	Handler UploadHandler
}

func (o *Upload) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUploadParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principle
	if uprinc != nil {
		principal = uprinc.(*models.Principle) // this is really a models.Principle, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
