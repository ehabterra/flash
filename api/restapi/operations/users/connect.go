// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/ehabterra/flash_api/api/models"
)

// ConnectHandlerFunc turns a function with the right signature into a connect handler
type ConnectHandlerFunc func(ConnectParams, *models.Principle) middleware.Responder

// Handle executing the request and returning a response
func (fn ConnectHandlerFunc) Handle(params ConnectParams, principal *models.Principle) middleware.Responder {
	return fn(params, principal)
}

// ConnectHandler interface for that can handle valid connect params
type ConnectHandler interface {
	Handle(ConnectParams, *models.Principle) middleware.Responder
}

// NewConnect creates a new http.Handler for the connect operation
func NewConnect(ctx *middleware.Context, handler ConnectHandler) *Connect {
	return &Connect{Context: ctx, Handler: handler}
}

/* Connect swagger:route POST /api/v1/users/me/connections/{account_number} users connect

Connect to a registered bank

*/
type Connect struct {
	Context *middleware.Context
	Handler ConnectHandler
}

func (o *Connect) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewConnectParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principle
	if uprinc != nil {
		principal = uprinc.(*models.Principle) // this is really a models.Principle, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
