// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConnectRequest connect request
//
// swagger:model connectRequest
type ConnectRequest struct {

	// bank id
	// Required: true
	BankID *string `json:"bank_id"`

	// branch number
	// Required: true
	BranchNumber *string `json:"branch_number"`

	// holder name
	// Required: true
	HolderName *string `json:"holder_name"`

	// reference
	Reference string `json:"reference,omitempty"`
}

// Validate validates this connect request
func (m *ConnectRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBankID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBranchNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHolderName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConnectRequest) validateBankID(formats strfmt.Registry) error {

	if err := validate.Required("bank_id", "body", m.BankID); err != nil {
		return err
	}

	return nil
}

func (m *ConnectRequest) validateBranchNumber(formats strfmt.Registry) error {

	if err := validate.Required("branch_number", "body", m.BranchNumber); err != nil {
		return err
	}

	return nil
}

func (m *ConnectRequest) validateHolderName(formats strfmt.Registry) error {

	if err := validate.Required("holder_name", "body", m.HolderName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this connect request based on context it is used
func (m *ConnectRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ConnectRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConnectRequest) UnmarshalBinary(b []byte) error {
	var res ConnectRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
